// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: v1/Cmd.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PCommandType int32

const (
	PCommandType_NONE                     PCommandType = 0
	PCommandType_PING                     PCommandType = 100
	PCommandType_PONG                     PCommandType = 101
	PCommandType_ECHO                     PCommandType = 710
	PCommandType_ACTIVE_THREAD_COUNT      PCommandType = 730
	PCommandType_ACTIVE_THREAD_DUMP       PCommandType = 740
	PCommandType_ACTIVE_THREAD_LIGHT_DUMP PCommandType = 750
)

// Enum value maps for PCommandType.
var (
	PCommandType_name = map[int32]string{
		0:   "NONE",
		100: "PING",
		101: "PONG",
		710: "ECHO",
		730: "ACTIVE_THREAD_COUNT",
		740: "ACTIVE_THREAD_DUMP",
		750: "ACTIVE_THREAD_LIGHT_DUMP",
	}
	PCommandType_value = map[string]int32{
		"NONE":                     0,
		"PING":                     100,
		"PONG":                     101,
		"ECHO":                     710,
		"ACTIVE_THREAD_COUNT":      730,
		"ACTIVE_THREAD_DUMP":       740,
		"ACTIVE_THREAD_LIGHT_DUMP": 750,
	}
)

func (x PCommandType) Enum() *PCommandType {
	p := new(PCommandType)
	*p = x
	return p
}

func (x PCommandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PCommandType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_Cmd_proto_enumTypes[0].Descriptor()
}

func (PCommandType) Type() protoreflect.EnumType {
	return &file_v1_Cmd_proto_enumTypes[0]
}

func (x PCommandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PCommandType.Descriptor instead.
func (PCommandType) EnumDescriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{0}
}

type PCmdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*PCmdMessage_HandshakeMessage
	//	*PCmdMessage_FailMessage
	Message isPCmdMessage_Message `protobuf_oneof:"message"`
}

func (x *PCmdMessage) Reset() {
	*x = PCmdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdMessage) ProtoMessage() {}

func (x *PCmdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdMessage.ProtoReflect.Descriptor instead.
func (*PCmdMessage) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{0}
}

func (m *PCmdMessage) GetMessage() isPCmdMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *PCmdMessage) GetHandshakeMessage() *PCmdServiceHandshake {
	if x, ok := x.GetMessage().(*PCmdMessage_HandshakeMessage); ok {
		return x.HandshakeMessage
	}
	return nil
}

func (x *PCmdMessage) GetFailMessage() *PCmdResponse {
	if x, ok := x.GetMessage().(*PCmdMessage_FailMessage); ok {
		return x.FailMessage
	}
	return nil
}

type isPCmdMessage_Message interface {
	isPCmdMessage_Message()
}

type PCmdMessage_HandshakeMessage struct {
	HandshakeMessage *PCmdServiceHandshake `protobuf:"bytes,1,opt,name=handshakeMessage,proto3,oneof"`
}

type PCmdMessage_FailMessage struct {
	FailMessage *PCmdResponse `protobuf:"bytes,2,opt,name=failMessage,proto3,oneof"`
}

func (*PCmdMessage_HandshakeMessage) isPCmdMessage_Message() {}

func (*PCmdMessage_FailMessage) isPCmdMessage_Message() {}

type PCmdServiceHandshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// initial message
	SupportCommandServiceKey []int32 `protobuf:"varint,1,rep,packed,name=supportCommandServiceKey,proto3" json:"supportCommandServiceKey,omitempty"`
}

func (x *PCmdServiceHandshake) Reset() {
	*x = PCmdServiceHandshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdServiceHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdServiceHandshake) ProtoMessage() {}

func (x *PCmdServiceHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdServiceHandshake.ProtoReflect.Descriptor instead.
func (*PCmdServiceHandshake) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{1}
}

func (x *PCmdServiceHandshake) GetSupportCommandServiceKey() []int32 {
	if x != nil {
		return x.SupportCommandServiceKey
	}
	return nil
}

type PCmdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseId int32                   `protobuf:"varint,1,opt,name=responseId,proto3" json:"responseId,omitempty"`
	Status     int32                   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Message    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PCmdResponse) Reset() {
	*x = PCmdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdResponse) ProtoMessage() {}

func (x *PCmdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdResponse.ProtoReflect.Descriptor instead.
func (*PCmdResponse) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{2}
}

func (x *PCmdResponse) GetResponseId() int32 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *PCmdResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PCmdResponse) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type PCmdStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseId int32                   `protobuf:"varint,1,opt,name=responseId,proto3" json:"responseId,omitempty"`
	SequenceId int32                   `protobuf:"varint,2,opt,name=sequenceId,proto3" json:"sequenceId,omitempty"`
	Message    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PCmdStreamResponse) Reset() {
	*x = PCmdStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdStreamResponse) ProtoMessage() {}

func (x *PCmdStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdStreamResponse.ProtoReflect.Descriptor instead.
func (*PCmdStreamResponse) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{3}
}

func (x *PCmdStreamResponse) GetResponseId() int32 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *PCmdStreamResponse) GetSequenceId() int32 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *PCmdStreamResponse) GetMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

type PCmdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId int32 `protobuf:"varint,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	// Types that are assignable to Command:
	//	*PCmdRequest_CommandEcho
	//	*PCmdRequest_CommandActiveThreadCount
	//	*PCmdRequest_CommandActiveThreadDump
	//	*PCmdRequest_CommandActiveThreadLightDump
	Command isPCmdRequest_Command `protobuf_oneof:"command"`
}

func (x *PCmdRequest) Reset() {
	*x = PCmdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdRequest) ProtoMessage() {}

func (x *PCmdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdRequest.ProtoReflect.Descriptor instead.
func (*PCmdRequest) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{4}
}

func (x *PCmdRequest) GetRequestId() int32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (m *PCmdRequest) GetCommand() isPCmdRequest_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *PCmdRequest) GetCommandEcho() *PCmdEcho {
	if x, ok := x.GetCommand().(*PCmdRequest_CommandEcho); ok {
		return x.CommandEcho
	}
	return nil
}

func (x *PCmdRequest) GetCommandActiveThreadCount() *PCmdActiveThreadCount {
	if x, ok := x.GetCommand().(*PCmdRequest_CommandActiveThreadCount); ok {
		return x.CommandActiveThreadCount
	}
	return nil
}

func (x *PCmdRequest) GetCommandActiveThreadDump() *PCmdActiveThreadDump {
	if x, ok := x.GetCommand().(*PCmdRequest_CommandActiveThreadDump); ok {
		return x.CommandActiveThreadDump
	}
	return nil
}

func (x *PCmdRequest) GetCommandActiveThreadLightDump() *PCmdActiveThreadLightDump {
	if x, ok := x.GetCommand().(*PCmdRequest_CommandActiveThreadLightDump); ok {
		return x.CommandActiveThreadLightDump
	}
	return nil
}

type isPCmdRequest_Command interface {
	isPCmdRequest_Command()
}

type PCmdRequest_CommandEcho struct {
	CommandEcho *PCmdEcho `protobuf:"bytes,710,opt,name=commandEcho,proto3,oneof"`
}

type PCmdRequest_CommandActiveThreadCount struct {
	CommandActiveThreadCount *PCmdActiveThreadCount `protobuf:"bytes,730,opt,name=commandActiveThreadCount,proto3,oneof"`
}

type PCmdRequest_CommandActiveThreadDump struct {
	CommandActiveThreadDump *PCmdActiveThreadDump `protobuf:"bytes,740,opt,name=commandActiveThreadDump,proto3,oneof"`
}

type PCmdRequest_CommandActiveThreadLightDump struct {
	CommandActiveThreadLightDump *PCmdActiveThreadLightDump `protobuf:"bytes,750,opt,name=commandActiveThreadLightDump,proto3,oneof"`
}

func (*PCmdRequest_CommandEcho) isPCmdRequest_Command() {}

func (*PCmdRequest_CommandActiveThreadCount) isPCmdRequest_Command() {}

func (*PCmdRequest_CommandActiveThreadDump) isPCmdRequest_Command() {}

func (*PCmdRequest_CommandActiveThreadLightDump) isPCmdRequest_Command() {}

type PCmdEcho struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PCmdEcho) Reset() {
	*x = PCmdEcho{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdEcho) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdEcho) ProtoMessage() {}

func (x *PCmdEcho) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdEcho.ProtoReflect.Descriptor instead.
func (*PCmdEcho) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{5}
}

func (x *PCmdEcho) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PCmdEchoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *PCmdResponse `protobuf:"bytes,1,opt,name=commonResponse,proto3" json:"commonResponse,omitempty"`
	Message        string        `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PCmdEchoResponse) Reset() {
	*x = PCmdEchoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdEchoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdEchoResponse) ProtoMessage() {}

func (x *PCmdEchoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdEchoResponse.ProtoReflect.Descriptor instead.
func (*PCmdEchoResponse) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{6}
}

func (x *PCmdEchoResponse) GetCommonResponse() *PCmdResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *PCmdEchoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PCmdActiveThreadDump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit        int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	ThreadName   []string `protobuf:"bytes,2,rep,name=threadName,proto3" json:"threadName,omitempty"`
	LocalTraceId []int64  `protobuf:"varint,3,rep,packed,name=localTraceId,proto3" json:"localTraceId,omitempty"`
}

func (x *PCmdActiveThreadDump) Reset() {
	*x = PCmdActiveThreadDump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdActiveThreadDump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdActiveThreadDump) ProtoMessage() {}

func (x *PCmdActiveThreadDump) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdActiveThreadDump.ProtoReflect.Descriptor instead.
func (*PCmdActiveThreadDump) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{7}
}

func (x *PCmdActiveThreadDump) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PCmdActiveThreadDump) GetThreadName() []string {
	if x != nil {
		return x.ThreadName
	}
	return nil
}

func (x *PCmdActiveThreadDump) GetLocalTraceId() []int64 {
	if x != nil {
		return x.LocalTraceId
	}
	return nil
}

type PCmdActiveThreadDumpRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *PCmdResponse        `protobuf:"bytes,1,opt,name=commonResponse,proto3" json:"commonResponse,omitempty"`
	ThreadDump     []*PActiveThreadDump `protobuf:"bytes,2,rep,name=threadDump,proto3" json:"threadDump,omitempty"`
	Type           string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	SubType        string               `protobuf:"bytes,4,opt,name=subType,proto3" json:"subType,omitempty"`
	Version        string               `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PCmdActiveThreadDumpRes) Reset() {
	*x = PCmdActiveThreadDumpRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdActiveThreadDumpRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdActiveThreadDumpRes) ProtoMessage() {}

func (x *PCmdActiveThreadDumpRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdActiveThreadDumpRes.ProtoReflect.Descriptor instead.
func (*PCmdActiveThreadDumpRes) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{8}
}

func (x *PCmdActiveThreadDumpRes) GetCommonResponse() *PCmdResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *PCmdActiveThreadDumpRes) GetThreadDump() []*PActiveThreadDump {
	if x != nil {
		return x.ThreadDump
	}
	return nil
}

func (x *PCmdActiveThreadDumpRes) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PCmdActiveThreadDumpRes) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *PCmdActiveThreadDumpRes) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type PCmdActiveThreadLightDump struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit        int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	ThreadName   []string `protobuf:"bytes,2,rep,name=threadName,proto3" json:"threadName,omitempty"`
	LocalTraceId []int64  `protobuf:"varint,3,rep,packed,name=localTraceId,proto3" json:"localTraceId,omitempty"`
}

func (x *PCmdActiveThreadLightDump) Reset() {
	*x = PCmdActiveThreadLightDump{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdActiveThreadLightDump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdActiveThreadLightDump) ProtoMessage() {}

func (x *PCmdActiveThreadLightDump) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdActiveThreadLightDump.ProtoReflect.Descriptor instead.
func (*PCmdActiveThreadLightDump) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{9}
}

func (x *PCmdActiveThreadLightDump) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PCmdActiveThreadLightDump) GetThreadName() []string {
	if x != nil {
		return x.ThreadName
	}
	return nil
}

func (x *PCmdActiveThreadLightDump) GetLocalTraceId() []int64 {
	if x != nil {
		return x.LocalTraceId
	}
	return nil
}

type PCmdActiveThreadLightDumpRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *PCmdResponse             `protobuf:"bytes,1,opt,name=commonResponse,proto3" json:"commonResponse,omitempty"`
	ThreadDump     []*PActiveThreadLightDump `protobuf:"bytes,2,rep,name=threadDump,proto3" json:"threadDump,omitempty"`
	Type           string                    `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	SubType        string                    `protobuf:"bytes,4,opt,name=subType,proto3" json:"subType,omitempty"`
	Version        string                    `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *PCmdActiveThreadLightDumpRes) Reset() {
	*x = PCmdActiveThreadLightDumpRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdActiveThreadLightDumpRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdActiveThreadLightDumpRes) ProtoMessage() {}

func (x *PCmdActiveThreadLightDumpRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdActiveThreadLightDumpRes.ProtoReflect.Descriptor instead.
func (*PCmdActiveThreadLightDumpRes) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{10}
}

func (x *PCmdActiveThreadLightDumpRes) GetCommonResponse() *PCmdResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *PCmdActiveThreadLightDumpRes) GetThreadDump() []*PActiveThreadLightDump {
	if x != nil {
		return x.ThreadDump
	}
	return nil
}

func (x *PCmdActiveThreadLightDumpRes) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PCmdActiveThreadLightDumpRes) GetSubType() string {
	if x != nil {
		return x.SubType
	}
	return ""
}

func (x *PCmdActiveThreadLightDumpRes) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type PCmdActiveThreadCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PCmdActiveThreadCount) Reset() {
	*x = PCmdActiveThreadCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdActiveThreadCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdActiveThreadCount) ProtoMessage() {}

func (x *PCmdActiveThreadCount) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdActiveThreadCount.ProtoReflect.Descriptor instead.
func (*PCmdActiveThreadCount) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{11}
}

type PCmdActiveThreadCountRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonStreamResponse *PCmdStreamResponse `protobuf:"bytes,1,opt,name=commonStreamResponse,proto3" json:"commonStreamResponse,omitempty"`
	HistogramSchemaType  int32               `protobuf:"varint,2,opt,name=histogramSchemaType,proto3" json:"histogramSchemaType,omitempty"`
	ActiveThreadCount    []int32             `protobuf:"varint,3,rep,packed,name=activeThreadCount,proto3" json:"activeThreadCount,omitempty"`
	TimeStamp            int64               `protobuf:"varint,4,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
}

func (x *PCmdActiveThreadCountRes) Reset() {
	*x = PCmdActiveThreadCountRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_Cmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PCmdActiveThreadCountRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PCmdActiveThreadCountRes) ProtoMessage() {}

func (x *PCmdActiveThreadCountRes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_Cmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PCmdActiveThreadCountRes.ProtoReflect.Descriptor instead.
func (*PCmdActiveThreadCountRes) Descriptor() ([]byte, []int) {
	return file_v1_Cmd_proto_rawDescGZIP(), []int{12}
}

func (x *PCmdActiveThreadCountRes) GetCommonStreamResponse() *PCmdStreamResponse {
	if x != nil {
		return x.CommonStreamResponse
	}
	return nil
}

func (x *PCmdActiveThreadCountRes) GetHistogramSchemaType() int32 {
	if x != nil {
		return x.HistogramSchemaType
	}
	return 0
}

func (x *PCmdActiveThreadCountRes) GetActiveThreadCount() []int32 {
	if x != nil {
		return x.ActiveThreadCount
	}
	return nil
}

func (x *PCmdActiveThreadCountRes) GetTimeStamp() int64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

var File_v1_Cmd_proto protoreflect.FileDescriptor

var file_v1_Cmd_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x31, 0x2f, 0x43, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x13, 0x76, 0x31, 0x2f, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x50, 0x43, 0x6d, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x68, 0x61, 0x6e, 0x64, 0x73,
	0x68, 0x61, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43, 0x6d, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x10, 0x68,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43, 0x6d, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x52, 0x0a, 0x14, 0x50, 0x43, 0x6d, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x18, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x7e, 0x0a, 0x0c, 0x50, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x12, 0x50, 0x43, 0x6d, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x80, 0x03, 0x0a, 0x0b, 0x50, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x63, 0x68, 0x6f,
	0x18, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43, 0x6d,
	0x64, 0x45, 0x63, 0x68, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x45, 0x63, 0x68, 0x6f, 0x12, 0x58, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xda, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43, 0x6d,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x55,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x18, 0xe4, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43, 0x6d, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x64, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x44, 0x75, 0x6d, 0x70, 0x18, 0xee, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x43, 0x6d, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x1c, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x24, 0x0a, 0x08, 0x50, 0x43, 0x6d, 0x64, 0x45, 0x63,
	0x68, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x66, 0x0a, 0x10,
	0x50, 0x43, 0x6d, 0x64, 0x45, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43,
	0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a, 0x14, 0x50, 0x43, 0x6d, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x17, 0x50, 0x43, 0x6d, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x52,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44,
	0x75, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x19, 0x50,
	0x43, 0x6d, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0xdc, 0x01, 0x0a, 0x1c, 0x50, 0x43, 0x6d, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x6d, 0x70,
	0x52, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x43, 0x6d, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x0a, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x0a, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x43, 0x6d, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x50,
	0x43, 0x6d, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x43, 0x6d, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x14, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x2a, 0x89, 0x01, 0x0a, 0x0c, 0x50, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x4e, 0x47, 0x10, 0x65,
	0x12, 0x09, 0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x10, 0xc6, 0x05, 0x12, 0x18, 0x0a, 0x13, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0xda, 0x05, 0x12, 0x17, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x44, 0x55, 0x4d, 0x50, 0x10, 0xe4, 0x05, 0x12, 0x1d,
	0x0a, 0x18, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x44, 0x55, 0x4d, 0x50, 0x10, 0xee, 0x05, 0x42, 0x34, 0x0a,
	0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x61, 0x76, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x70,
	0x69, 0x6e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x42, 0x08, 0x43, 0x6d, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x03,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_Cmd_proto_rawDescOnce sync.Once
	file_v1_Cmd_proto_rawDescData = file_v1_Cmd_proto_rawDesc
)

func file_v1_Cmd_proto_rawDescGZIP() []byte {
	file_v1_Cmd_proto_rawDescOnce.Do(func() {
		file_v1_Cmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_Cmd_proto_rawDescData)
	})
	return file_v1_Cmd_proto_rawDescData
}

var file_v1_Cmd_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_Cmd_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_v1_Cmd_proto_goTypes = []interface{}{
	(PCommandType)(0),                    // 0: v1.PCommandType
	(*PCmdMessage)(nil),                  // 1: v1.PCmdMessage
	(*PCmdServiceHandshake)(nil),         // 2: v1.PCmdServiceHandshake
	(*PCmdResponse)(nil),                 // 3: v1.PCmdResponse
	(*PCmdStreamResponse)(nil),           // 4: v1.PCmdStreamResponse
	(*PCmdRequest)(nil),                  // 5: v1.PCmdRequest
	(*PCmdEcho)(nil),                     // 6: v1.PCmdEcho
	(*PCmdEchoResponse)(nil),             // 7: v1.PCmdEchoResponse
	(*PCmdActiveThreadDump)(nil),         // 8: v1.PCmdActiveThreadDump
	(*PCmdActiveThreadDumpRes)(nil),      // 9: v1.PCmdActiveThreadDumpRes
	(*PCmdActiveThreadLightDump)(nil),    // 10: v1.PCmdActiveThreadLightDump
	(*PCmdActiveThreadLightDumpRes)(nil), // 11: v1.PCmdActiveThreadLightDumpRes
	(*PCmdActiveThreadCount)(nil),        // 12: v1.PCmdActiveThreadCount
	(*PCmdActiveThreadCountRes)(nil),     // 13: v1.PCmdActiveThreadCountRes
	(*wrapperspb.StringValue)(nil),       // 14: google.protobuf.StringValue
	(*PActiveThreadDump)(nil),            // 15: v1.PActiveThreadDump
	(*PActiveThreadLightDump)(nil),       // 16: v1.PActiveThreadLightDump
}
var file_v1_Cmd_proto_depIdxs = []int32{
	2,  // 0: v1.PCmdMessage.handshakeMessage:type_name -> v1.PCmdServiceHandshake
	3,  // 1: v1.PCmdMessage.failMessage:type_name -> v1.PCmdResponse
	14, // 2: v1.PCmdResponse.message:type_name -> google.protobuf.StringValue
	14, // 3: v1.PCmdStreamResponse.message:type_name -> google.protobuf.StringValue
	6,  // 4: v1.PCmdRequest.commandEcho:type_name -> v1.PCmdEcho
	12, // 5: v1.PCmdRequest.commandActiveThreadCount:type_name -> v1.PCmdActiveThreadCount
	8,  // 6: v1.PCmdRequest.commandActiveThreadDump:type_name -> v1.PCmdActiveThreadDump
	10, // 7: v1.PCmdRequest.commandActiveThreadLightDump:type_name -> v1.PCmdActiveThreadLightDump
	3,  // 8: v1.PCmdEchoResponse.commonResponse:type_name -> v1.PCmdResponse
	3,  // 9: v1.PCmdActiveThreadDumpRes.commonResponse:type_name -> v1.PCmdResponse
	15, // 10: v1.PCmdActiveThreadDumpRes.threadDump:type_name -> v1.PActiveThreadDump
	3,  // 11: v1.PCmdActiveThreadLightDumpRes.commonResponse:type_name -> v1.PCmdResponse
	16, // 12: v1.PCmdActiveThreadLightDumpRes.threadDump:type_name -> v1.PActiveThreadLightDump
	4,  // 13: v1.PCmdActiveThreadCountRes.commonStreamResponse:type_name -> v1.PCmdStreamResponse
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_v1_Cmd_proto_init() }
func file_v1_Cmd_proto_init() {
	if File_v1_Cmd_proto != nil {
		return
	}
	file_v1_ThreadDump_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_Cmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdServiceHandshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdEcho); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdEchoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdActiveThreadDump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdActiveThreadDumpRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdActiveThreadLightDump); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdActiveThreadLightDumpRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdActiveThreadCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_Cmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PCmdActiveThreadCountRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_Cmd_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PCmdMessage_HandshakeMessage)(nil),
		(*PCmdMessage_FailMessage)(nil),
	}
	file_v1_Cmd_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PCmdRequest_CommandEcho)(nil),
		(*PCmdRequest_CommandActiveThreadCount)(nil),
		(*PCmdRequest_CommandActiveThreadDump)(nil),
		(*PCmdRequest_CommandActiveThreadLightDump)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_Cmd_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_Cmd_proto_goTypes,
		DependencyIndexes: file_v1_Cmd_proto_depIdxs,
		EnumInfos:         file_v1_Cmd_proto_enumTypes,
		MessageInfos:      file_v1_Cmd_proto_msgTypes,
	}.Build()
	File_v1_Cmd_proto = out.File
	file_v1_Cmd_proto_rawDesc = nil
	file_v1_Cmd_proto_goTypes = nil
	file_v1_Cmd_proto_depIdxs = nil
}
